@Article{threads,
author="Kumar, Sanjeev
and Bruggeman, Carl
and Dybvig, R. Kent",
title="Threads Yield Continuations",
journal="LISP and Symbolic Computation",
year="1998",
month="May",
day="01",
volume="10",
number="3",
pages="223--236",
abstract="Just as a traditional continuation represents the rest of acomputation from a given point in the computation, a subcontinuationrepresents the rest of a subcomputation from agiven point in the subcomputation. Subcontinuationsare more expressive than traditional continuations and have been shown to beuseful for controlling tree-structured concurrency, yet they havepreviously been implemented only on uniprocessors. This article describes aconcurrent implementation of one-shot subcontinuations. Like one-shotcontinuations, one-shot subcontinuations are first-class but may be invokedat most once, a restriction obeyed by nearly all programs that usecontinuations. The techniques used to implement one-shot subcontinuationsmay be applied directly to other one-shot continuation mechanisms and may begeneralized to support multi-shot continuations as well. A novel feature ofthe implementation is that continuations are implemented in terms ofthreads. Because the implementation model does not rely upon any speciallanguage features or compilation techniques, the model is applicable toany language or language implementation that supports a small set of threadprimitives.",
issn="1573-0557",
doi="10.1023/A:1007782300874",
url="https://doi.org/10.1023/A:1007782300874"
}

@article{delimcc,
title = "Delimited control in OCaml, abstractly and concretely",
journal = "Theoretical Computer Science",
volume = "435",
pages = "56 - 76",
year = "2012",
note = "Functional and Logic Programming",
issn = "0304-3975",
doi = "https://doi.org/10.1016/j.tcs.2012.02.025",
url = "http://www.sciencedirect.com/science/article/pii/S0304397512001661",
author = "Oleg Kiselyov",
keywords = "Delimited continuation, Exception, Semantics, Implementation, Abstract machine",
abstract = "We describe the first implementation of multi-prompt delimited control operators in OCaml that is direct in that it captures only the needed part of the control stack. The implementation is a library that requires no changes to the OCaml compiler or run-time, so it is perfectly compatible with existing OCaml source and binary code. The library has been in fruitful practical use since 2006. We present the library as an implementation of an abstract machine derived by elaborating the definitional machine. The abstract view lets us distill a minimalistic API, scAPI, sufficient for implementing multi-prompt delimited control. We argue that a language system that supports exception and stack-overflow handling supports scAPI. With byte- and native-code OCaml systems as two examples, our library illustrates how to use scAPI to implement multi-prompt delimited control in a typed language. The approach is general and has been used to add multi-prompt delimited control to other existing language systems."
}
                  
@inproceedings{yield,
  title={Yield: Mainstream Delimited Continuations},
  author={Roshan P. James and Amr Sabry},
  year={1983}
}
